<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=windows-1251">
        
    <title>JQuery Grid</title>        
        
    <link href="jq.css" rel="stylesheet">
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.2/themes/smoothness/jquery-ui.css">
    
</head>

<body>
    <script type="text/javascript">
    
        var rev = false;
        var filtermessage = "";
        var combos = [];
        var data_unfiltered = [];
        var data_filtered = [];

        var sort_by = function(field, reverse, primer) {

            var key = primer ?
                function(x) {
                    return primer(x[field])
                } :
                function(x) {
                    return x[field]
                };

            reverse = !reverse ? 1 : -1;

            return function(a, b) {
                return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
            }
        }

 
     
 
        var resize_body = function (my_th, i)  {
            var length=my_th[0].style.width;
            for (var j=1; j<$(".table")[0].rows.length; j++)
            {
                $(".table")[0].rows[j].cells[i].style.width=length;
            }
        }

        var drag_th = function(event) {	
           var i = event.currentTarget.cellIndex; 
		   event.dataTransfer.setData("text/plain", i);
		   ev.dataTransfer.dropEffect = "move";
	    }

	    var drop_th = function(event) {
		   var i = event.currentTarget.cellIndex;
           var inner_td = "";
		   event.preventDefault();
		   var data = event.dataTransfer.getData("text");
 		   for (var j=0;j<$(".table")[0].rows.length; j++)
		       {
			   inner_td = $(".table")[0].rows[j].cells[i].outerHTML;	
			   $(".table")[0].rows[j].cells[i].outerHTML = $(".table")[0].rows[j].cells[data].outerHTML;
			   $(".table")[0].rows[j].cells[data].outerHTML = inner_td;
		       }
	       }
        
        var build_table_tags = function(islike, field, filter, sortonly) {
            
               var th_gen = "";
               var tr_gen = "";               
               var itemsheader = [];
               var items = [];
               var i = 0;   
            
               sortonly = sortonly || false;
            
                if ((field != "") && (filter == ""))                
                {
                    
                    data_unfiltered.sort(sort_by(field, rev, function(a) {
                        return a.toUpperCase()
                    }));
                    
                    data_filtered.sort(sort_by(field, rev, function(a) {
                        return a.toUpperCase()
                    }));
                }

            
                if ((filter == "") && (! sortonly))
                {                    
                    data_filtered = data_unfiltered;
                }

                //data->data_filtered
            
                if (filter!="")
                {
                   data_filtered = data_unfiltered.filter(function(value) {
                       if (! islike)
                           {
                               if (value[field]==filter)
                                   return true;
                           }
                       else 
                           {
                              if (value[field].toLowerCase().indexOf(filter.toLowerCase()) != -1) 
                                  return true;
                           }
                   });
                }            
            
                combos = data_filtered.reduce(function(acc, people) {
                    return Object.keys(people).reduce(function(acc, field) {
                        if (!acc[field]) {
                            acc[field] = [""]; 
                        }
                        if (acc[field].indexOf(people[field]) == -1) {
                            acc[field].push(people[field]);
                        }
                        return acc;
                    }, acc);
                }, {});


                itemsheader.push("<thead><tr class='tabhead'>");
                $.each(combos, function(key0, val0) {
                    th_gen = `<th id = 'th${key0}' onresize='resize_body($(this), " + i + ");' draggable='true' ondragstart='drag_th(event);' ondragover='return false;' ondrop='drop_th(event);'>
                        <div class='input-group-btn'>
                        <button class='btn btn-default btn-secondary dropdown-toggle' type='button' data-toggle='dropdown' 
                         >${key0}<span class='caret'></span></button>
                        <ul class='dropdown-menu dropdown-menu-right uppy'  role='menu'>
                        <li contendeditable><input class='okenterfilter' id='ok${key0}' type='text' class='form - control'
                         placeholder='enter filter here'   >
                        <input type='button' value='OK' class='btn-default' onclick='build_table_tags(true, \"${key0}\", $(this).prev()[0].value);'></button></li>`;
                    for (var j = 0; j < val0.length; j++) {
                        th_gen += `<li><a href='#' onclick='build_table_tags(false, \"${key0}\", \"${val0[j]}\");'>${val0[j]}</a></li>`;
                    }
                    i = i + 1;
                    th_gen += `</ul></div><span class='caret sorty' onclick='build_table_tags(false, \"${key0}\", \"\", true);'></span></th>`;
                    itemsheader.push(th_gen);
                });
                itemsheader.push("</tr></thead><tbody>");



                $.each(data_filtered, function(key, val) {                    
                    tr_gen = "<tr>";
                    $.each(val, function(key0, val0) { 
                        tr_gen += `<td id='${key}${key0}'>${val0}</td>`;
                    });
                    tr_gen += "</tr>";                    
                    items.push(tr_gen);
                    i++;
                }); 
                items.push("</tbody>");                
                
                if (filter == "") {
                    filtermessage = `nofilter. ${(items.length - 1)} row(s)`;
                } else {
                    if (!islike) {
                        filtermessage = `filtered [${field}] = ${filter}. ${(items.length - 1)} row(s)`;
                    } else {
                        filtermessage = `filtered [${field}] like ${filter}. ${(items.length - 1)} row(s)`;
                    }

                }
 
                
                $(".table.table-striped").remove();
                $("<table/>", {
                    "class": "table table-striped",
                    html: itemsheader.join("")
                }).append(items.join("")).append(`<tfoot><tr><td id='filermessage'>${filtermessage}</td></tr></tfoot>`).appendTo("body");

                $(".okenterfilter").keypress(function() {
                    var my_input = $(this);
                    if (arguments[0].keyCode==13) {
                        build_table_tags(true, my_input[0].id.substring(2), my_input[0].value);    
                        }
                });

                $(function() {
                   $('th').resizable({
                      alsoResize: "#astor img",
                      minWidth:100,
                      minHeight: 50            
                   });
                });

            if (!rev) {
                rev = true;
            } else {
                rev = false;
            }
        
        } 


        var get_table = function(islike, field, filter) {
 
            field = field || "";
            filter = filter || "";

            $.getJSON("https://romanwit.github.io/jquery_grid/jq.json", function(data) {                
                data_unfiltered = data;
                data_filtered = data;
                build_table_tags(islike, field, filter);          
            });
        }

        $(document).ready(function() {
            get_table(false);
        });
       


    </script>

</body>

</html>
